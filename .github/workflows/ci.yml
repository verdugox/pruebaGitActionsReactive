name: CI/CD Pipeline for AKS

on:
  push:
    branches:
      - develop  # Ejecutar solo en 'develop'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Descargar c√≥digo fuente y asegurar repositorio completo
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Asegura que se descarga todo el repo

      # 2Ô∏è‚É£ Depuraci√≥n: Verificar archivos en GitHub Actions
      - name: Debug Workspace Structure
        run: |
          echo "üîç Ubicaci√≥n actual del workspace:"
          pwd
          echo "üìÇ Lista de archivos en el workspace:"
          ls -R

      # 3Ô∏è‚É£ Configurar JDK 17
      - name: Set up Java version
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4Ô∏è‚É£ Construir la aplicaci√≥n con Maven
      - name: Build with Maven
        working-directory: ./client-service
        run: mvn clean install

      # 5Ô∏è‚É£ Iniciar sesi√≥n en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6Ô∏è‚É£ Construir la imagen de Docker
      - name: Build Docker Image
        working-directory: ./client-service
        run: docker build -t verdugox/springboot-app:1.0 .

      # 7Ô∏è‚É£ Subir la imagen a Docker Hub
      - name: Push Docker Image
        run: docker push verdugox/springboot-app:1.0

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Autenticarse en Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2Ô∏è‚É£ Configurar contexto de AKS
      - name: Set AKS Context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER }}

      # 3Ô∏è‚É£ Verificar permisos en AKS
      - name: Verify Kubernetes Permissions
        run: |
          echo "üîç Verificando permisos en AKS..."
          kubectl auth can-i create deployments --all-namespaces
          kubectl auth can-i create services --all-namespaces

      # 4Ô∏è‚É£ Verificar si `k8s/` existe y corregir la ruta si es necesario
      - name: Ensure k8s directory exists
        run: |
          echo "üìÇ Buscando carpeta 'k8s/' en el workspace..."
          if [ -d "$GITHUB_WORKSPACE/k8s" ]; then
            echo "‚úÖ Carpeta 'k8s/' encontrada en $GITHUB_WORKSPACE."
          else
            echo "üö® ERROR: La carpeta 'k8s/' NO EXISTE en el workspace."
            echo "üîç Buscando en otras ubicaciones..."
            find $GITHUB_WORKSPACE -type d -name "k8s"
            exit 1
          fi

      # 5Ô∏è‚É£ Aplicar los archivos de Kubernetes (verificando rutas din√°micamente)
      - name: Deploy to AKS
        run: |
          echo "‚è≥ Esperando 5 segundos antes del despliegue..."
          sleep 5
          echo "üöÄ Aplicando archivos de Kubernetes..."
          DEPLOYMENT_FILE=$(find $GITHUB_WORKSPACE -type f -name "deployment.yaml")
          SERVICE_FILE=$(find $GITHUB_WORKSPACE -type f -name "service.yaml")

          if [ -f "$DEPLOYMENT_FILE" ] && [ -f "$SERVICE_FILE" ]; then
            echo "‚úÖ Archivos YAML encontrados:"
            echo "$DEPLOYMENT_FILE"
            echo "$SERVICE_FILE"
            kubectl apply -f "$DEPLOYMENT_FILE"
            kubectl apply -f "$SERVICE_FILE"
          else
            echo "üö® ERROR: No se encontraron los archivos de Kubernetes."
            exit 1
          fi

      # 6Ô∏è‚É£ Verificar estado de los pods despu√©s del despliegue
      - name: List Kubernetes Pods
        run: kubectl get pods -o wide

      # 7Ô∏è‚É£ Reiniciar los pods de forma segura
      - name: Restart AKS Pods
        run: |
          echo "üîÑ Reiniciando pods en AKS..."
          if kubectl get deployment springboot-app; then
            kubectl rollout restart deployment springboot-app
          else
            echo "‚ö†Ô∏è Advertencia: No se encontr√≥ el deployment 'springboot-app', verificando nuevamente..."
            kubectl get deployments
            exit 1
          fi

      # 8Ô∏è‚É£ Verificar estado final del despliegue
      - name: Verify Deployment Status
        run: kubectl get deployments -o wide
