name: CI/CD Pipeline for AKS

on:
  push:
    branches:
      - develop  # Ejecutar solo en 'develop'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar c√≥digo fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Verificar ubicaci√≥n de archivos en GitHub Actions
      - name: Print current workspace
        run: |
          echo "üîç Ubicaci√≥n actual del workspace:"
          pwd
          echo "üìÇ Lista de archivos en el workspace:"
          ls -R

      # 3. Configurar JDK 17
      - name: Set up Java version
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. Construir la aplicaci√≥n con Maven
      - name: Build with Maven
        working-directory: ./client-service
        run: mvn clean install

      # 5. Iniciar sesi√≥n en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Construir la imagen de Docker (con `.` al final)
      - name: Build Docker Image
        working-directory: ./client-service
        run: docker build -t verdugox/springboot-app:1.0 .

      # 7. Subir la imagen a Docker Hub
      - name: Push Docker Image
        run: docker push verdugox/springboot-app:1.0

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1. Autenticarse en Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2. Configurar contexto de AKS
      - name: Set AKS Context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER }}

      # 3. Verificar permisos de usuario en AKS
      - name: Verify Kubernetes Permissions
        run: |
          echo "üîç Verificando permisos en AKS..."
          kubectl auth can-i create deployments --all-namespaces
          kubectl auth can-i create services --all-namespaces

      # 4. Verificar existencia de `k8s/`
      - name: Debug Kubernetes YAML files
        run: |
          echo "üìÇ Verificando archivos de despliegue en el workspace..."
          ls -R $GITHUB_WORKSPACE || true

      # 5. Asegurar que `k8s/` existe antes de proceder
      - name: Ensure k8s directory exists
        run: |
          if [ ! -d "$GITHUB_WORKSPACE/k8s" ]; then
            echo "üö® ERROR: La carpeta 'k8s/' no existe en el workspace."
            exit 1
          fi
          echo "‚úÖ Carpeta 'k8s/' encontrada correctamente."

      # 6. Aplicar los archivos de Kubernetes (espera 5s para sincronizaci√≥n)
      - name: Deploy to AKS
        run: |
          echo "‚è≥ Esperando 5 segundos para asegurar disponibilidad..."
          sleep 5
          echo "üöÄ Aplicando archivos de Kubernetes..."
          kubectl apply -f $GITHUB_WORKSPACE/k8s/deployment.yaml
          kubectl apply -f $GITHUB_WORKSPACE/k8s/service.yaml

      # 7. Verificar estado de los pods despu√©s del despliegue
      - name: List Kubernetes Pods
        run: kubectl get pods -o wide

      # 8. Reiniciar los pods de forma segura
      - name: Restart AKS Pods
        run: |
          echo "üîÑ Reiniciando pods en AKS..."
          if kubectl get deployment springboot-app; then
            kubectl rollout restart deployment springboot-app
          else
            echo "‚ö†Ô∏è Advertencia: No se encontr√≥ el deployment 'springboot-app', verificando nuevamente..."
            kubectl get deployments
            exit 1
          fi

      # 9. Verificar estado final del despliegue
      - name: Verify Deployment Status
        run: kubectl get deployments -o wide
