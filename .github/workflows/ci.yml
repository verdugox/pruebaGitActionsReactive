name: CI/CD Pipeline for AKS

on:
  push:
    branches:
      - develop  # Ejecutar solo en 'develop'
  workflow_dispatch:  # Permitir ejecuci贸n manual

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar c贸digo fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar JDK 17
      - name: Set up Java version
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Construir la aplicaci贸n con Maven
      - name: Build with Maven
        working-directory: ./client-service
        run: mvn clean install

      # 4. Iniciar sesi贸n en Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5. Construir la imagen de Docker
      - name: Build Docker Image
        run: docker build -t verdugox/springboot-app:1.0

      # 6. Subir la imagen a Docker Hub
      - name: Push Docker Image
        run: docker push verdugox/springboot-app:1.0

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1. Autenticarse en Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2. Configurar contexto de AKS
      - name: Set AKS Context
        run: az aks get-credentials --resource-group aks-rg --name aks-cluster

      # 3. Desplegar en AKS
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
