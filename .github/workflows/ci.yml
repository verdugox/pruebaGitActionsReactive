name: CI/CD Pipeline for AKS

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clonar el c√≥digo completamente
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Configurar JDK 17 para Maven
      - name: Set up Java version
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3Ô∏è‚É£ Construir la aplicaci√≥n con Maven
      - name: Build with Maven
        working-directory: ./client-service
        run: mvn clean install

      # 4Ô∏è‚É£ Iniciar sesi√≥n en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5Ô∏è‚É£ Construir la imagen de Docker con `latest`
      - name: Build Docker Image
        working-directory: ./client-service
        run: docker build -t verdugox/springboot-app:latest .

      # 6Ô∏è‚É£ Subir la imagen a Docker Hub
      - name: Push Docker Image
        run: docker push verdugox/springboot-app:latest

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Autenticarse en Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2Ô∏è‚É£ Obtener credenciales del AKS
      - name: Set AKS Context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER }}

      # 3Ô∏è‚É£ Verificar permisos en Kubernetes
      - name: Verify Kubernetes Permissions
        run: |
          echo "üîç Verificando permisos en AKS..."
          kubectl auth can-i create deployments --all-namespaces
          kubectl auth can-i create services --all-namespaces

      # 4Ô∏è‚É£ Desplegar la aplicaci√≥n en AKS (Incluyendo Variables de Entorno)
      - name: Deploy to AKS
        run: |
          echo "üöÄ Creando Deployment y Service en Kubernetes..."
          
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: springboot-app
            labels:
              app: springboot-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: springboot-app
            template:
              metadata:
                labels:
                  app: springboot-app
              spec:
                containers:
                - name: springboot-app
                  image: "verdugox/springboot-app:latest"
                  imagePullPolicy: Always  # üöÄ Siempre descargar la √∫ltima imagen
                  ports:
                  - containerPort: 8086
                  env:
                  - name: SPRING_PROFILES_ACTIVE
                    value: "prod"
                  - name: SPRING_DATA_MONGODB_URI
                    value: "${{ secrets.MONGODB_URI }}"
                  - name: SPRING_MAIL_HOST
                    value: "smtpout.secureserver.net"
                  - name: SPRING_MAIL_PORT
                    value: "465"
                  - name: SPRING_MAIL_USERNAME
                    value: "${{ secrets.MAIL_USERNAME }}"
                  - name: SPRING_MAIL_PASSWORD
                    value: "${{ secrets.MAIL_PASSWORD }}"
                  - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH
                    value: "true"
                  - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_ENABLE
                    value: "true"
                  - name: SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST
                    value: "smtpout.secureserver.net"
                  - name: CLOUDINARY_CLOUD_NAME
                    value: "${{ secrets.CLOUDINARY_CLOUD_NAME }}"
                  - name: CLOUDINARY_API_KEY
                    value: "${{ secrets.CLOUDINARY_API_KEY }}"
                  - name: CLOUDINARY_API_SECRET
                    value: "${{ secrets.CLOUDINARY_API_SECRET }}"
                  - name: APP_BASE_URL
                    value: "http://48.216.202.189"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: springboot-app-service
          spec:
            type: LoadBalancer
            ports:
            - port: 80
              targetPort: 8086
            selector:
              app: springboot-app
          EOF

      # 5Ô∏è‚É£ Verificar que los pods est√°n corriendo correctamente
      - name: List Kubernetes Pods
        run: kubectl get pods -o wide

      # 6Ô∏è‚É£ Reiniciar los pods en AKS despu√©s del despliegue para aplicar la √∫ltima imagen
      - name: Restart AKS Pods
        run: |
          echo "üîÑ Reiniciando pods en AKS..."
          kubectl rollout restart deployment springboot-app

      # 7Ô∏è‚É£ Verificar el estado final del despliegue en AKS
      - name: Verify Deployment Status
        run: kubectl get deployments -o wide
