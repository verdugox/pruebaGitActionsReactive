name: CI Pipeline for Develop

on:
  push:
    branches:
      - develop  # Ejecutar el flujo solo en la rama 'develop'
  workflow_dispatch:  # Permitir ejecución manual del workflow

jobs:
  build-and-test:
    runs-on: windows-latest  # Sistema operativo Windows

    steps:
      # 1. Descargar el código fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar JDK 17
      - name: Set up Java version
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Construir y verificar el proyecto con Maven
      - name: Build and Verify with Maven
        working-directory: ./client-service  # Cambia al directorio del proyecto
        run: |
          mvn clean install

      # 4. Notificar a Jenkins para ejecutar el job
      - name: Trigger Jenkins Job
        shell: pwsh  # Usar PowerShell en este paso
        run: |
          # Configuración de variables
          $jenkinsUrl = "${{ secrets.JENKINS_URL }}"  # Usar secreto para la URL de Jenkins
          $user = "${{ secrets.JENKINS_USER }}"
          $token = "${{ secrets.JENKINS_API_TOKEN }}"
          $jobToken = "${{ secrets.JENKINS_JOB_TOKEN }}"
          
          # Validación y limpieza de la URL
          if ([string]::IsNullOrWhiteSpace($jenkinsUrl)) {
              Write-Error "La URL de Jenkins no está configurada o contiene espacios en blanco."
              exit 1
          }
          
          if (-not $jenkinsUrl.StartsWith("https://")) {
              Write-Error "La URL de Jenkins debe comenzar con 'https://': $jenkinsUrl"
              exit 1
          }
          
          # Construcción de la URI completa
          $authHeader = "Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${user}:${token}")))"
          $fullUri = "$jenkinsUrl?token=$jobToken"
          
          # Imprimir detalles para depuración
          Write-Host "Full Jenkins URI: $($fullUri)"
          Write-Host "Authorization Header (censurado para seguridad)."
          
          # Realizar la solicitud a Jenkins
          try {
              Invoke-RestMethod -Uri $fullUri -Method Post -Headers @{Authorization = $authHeader}
              Write-Host "Solicitud enviada correctamente a Jenkins."
          } catch {
              Write-Error "Error al enviar la solicitud a Jenkins: $_"
              exit 1
          }

      # 5. Mensaje final
      - name: Notify Success
        if: success()
        run: echo "Build and tests completed successfully on 'develop' branch, Jenkins job triggered!"
