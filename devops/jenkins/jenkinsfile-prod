pipeline {
    agent any

    environment {
        MAVEN_HOME = tool 'Maven 3.9.9'
        JAVA_HOME = tool 'JDK17'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'verdugox/springboot-app'
        IMAGE_TAG = '1.0'
        CONFIG_FILE = "devops/deploy/prod-vars.yaml"
        ARTIFACTORY_SERVER_ID = 'ArtifactoryServer' // Nombre configurado en Jenkins
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Preparing environment..."
                checkout scm
                bat "${MAVEN_HOME}\\bin\\mvn --version"
            }
        }

        stage('Build JAR') {
            steps {
                echo "Building Spring Boot JAR..."
                dir('client-service') {
                    bat "${MAVEN_HOME}\\bin\\mvn clean package -DskipTests"
                }
            }
        }

        stage('Deploy to JFrog Artifactory') {
            steps {
                echo "Deploying artifact to JFrog Artifactory..."
                dir('client-service') {
                    rtMavenRun(
                        serverId: "${ARTIFACTORY_SERVER_ID}",
                        goals: 'deploy',
                        pom: 'pom.xml',
                        resolverId: 'maven-resolver',
                        deployerId: 'maven-deployer'
                    )
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "Running SonarQube Analysis..."
                withSonarQubeEnv('SonarQube') { // Nombre configurado en Jenkins
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) { // Token configurado en Jenkins
                        dir('client-service') {
                            bat """
                            ${MAVEN_HOME}\\bin\\mvn sonar:sonar ^
                                -Dsonar.projectKey=client-service ^
                                -Dsonar.host.url=http://localhost:9000 ^
                                -Dsonar.login=%SONAR_TOKEN% ^
                                -Dsonar.sources=src/main/java ^
                                -Dsonar.java.binaries=target/classes
                            """
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image..."
                dir('client-service') {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat """
                        docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG} .
                        docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                echo "Updating Deployment YAML..."
                script {
                    def yamlContent = readFile(CONFIG_FILE)
                    def updatedYaml = yamlContent.replaceAll(
                        "image: .*",
                        "image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}"
                    )
                    writeFile file: CONFIG_FILE, text: updatedYaml
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                echo "Deploying to AKS..."
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    withEnv(["KUBECONFIG=${KUBECONFIG_FILE}"]) {
                        bat """
                        kubectl apply -f ${CONFIG_FILE}
                        """
                    }
                }
            }
        }

        stage('Validate Deployment') {
            steps {
                echo "Validating Deployment..."
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    withEnv(["KUBECONFIG=${KUBECONFIG_FILE}"]) {
                        bat """
                        kubectl get pods -l app=springboot-app
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for more details."
        }
    }
}
