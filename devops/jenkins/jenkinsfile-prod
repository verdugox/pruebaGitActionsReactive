pipeline {
    agent any

    environment {
        MAVEN_HOME = tool 'Maven 3.9.9'
        JAVA_HOME = tool 'JDK17'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_IMAGE = 'verdugox/springboot-app'
        IMAGE_TAG = '1.0' // Cambia este valor seg√∫n corresponda
        CONFIG_FILE = "devops/deploy/prod-vars.yaml"
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Preparing environment..."
                checkout scm
                bat "${MAVEN_HOME}\\bin\\mvn --version"
            }
        }

        stage('Build JAR') {
            steps {
                echo "Building Spring Boot JAR..."
                dir('client-service') {
                    bat "${MAVEN_HOME}\\bin\\mvn clean package -DskipTests"
                }
            }
        }

        stage('Verify JAR File') {
            steps {
                echo "Verifying JAR file..."
                dir('client-service') {
                    bat "dir target"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image..."
                dir('client-service') {
                    bat """
                    docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG} .
                    docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                    docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                echo "Updating Deployment YAML with Docker Image..."
                script {
                    def yamlContent = readFile(CONFIG_FILE)
                    def updatedYaml = yamlContent.replaceAll(
                        "image: .*",
                        "image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}"
                    )
                    writeFile file: CONFIG_FILE, text: updatedYaml
                }
            }
        }

        stage('Debug Kubeconfig') {
            steps {
                echo "Debugging Kubeconfig..."
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    bat """
                    type ${KUBECONFIG_FILE}
                    """
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                echo "Deploying application to AKS..."
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    withEnv(["KUBECONFIG=${KUBECONFIG_FILE}"]) {
                        bat """
                        kubectl apply -f ${CONFIG_FILE}
                        """
                    }
                }
            }
        }

        stage('Validate Pods') {
            steps {
                echo "Validating AKS Pods..."
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    withEnv(["KUBECONFIG=${KUBECONFIG_FILE}"]) {
                        bat """
                        kubectl get pods -l app=springboot-app
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for more details."
        }
    }
}
