pipeline {
    agent any

    environment {
        MAVEN_HOME = tool 'Maven 3.9.9'
        JAVA_HOME = tool 'JDK17'
        KUBECONFIG = credentials('kubeconfig') // Archivo kubeconfig cargado en Jenkins
        JAR_NAME = "client-service-0.0.1-SNAPSHOT.jar"
        CONFIG_FILE = "devops/deploy/prod-vars.yaml"
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Preparing environment..."
                checkout scm
                bat "${MAVEN_HOME}\\bin\\mvn --version"
            }
        }

        stage('Build') {
            steps {
                dir('client-service') {
                    bat "${MAVEN_HOME}\\bin\\mvn clean package -DskipTests"
                }
            }
        }

        stage('Verify JAR File') {
            steps {
                dir('client-service') {
                    bat "dir target"
                }
            }
        }

        stage('Convert JAR to Base64') {
            steps {
                echo "Converting JAR to Base64..."
                bat """
                certutil -encode target\\${JAR_NAME} app.jar.base64
                """
            }
        }

        stage('Update ConfigMap') {
            steps {
                echo "Updating ConfigMap in prod-vars.yaml..."
                script {
                    def base64Content = readFile('app.jar.base64')
                    def yamlContent = readFile('prod-vars.yaml')
                    def updatedYaml = yamlContent.replaceAll("app.jar: \\|\\n(\\s+).*", "app.jar: |\\n      ${base64Content}")
                    writeFile file: 'prod-vars.yaml', text: updatedYaml
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                echo "Deploying application to AKS..."
                writeFile file: 'kubeconfig', text: "${KUBECONFIG}"
                withEnv(["KUBECONFIG=${WORKSPACE}/kubeconfig"]) {
                    bat """
                    kubectl apply -f prod-vars.yaml
                    """
                }
            }
        }

        stage('Validate Pods') {
            steps {
                echo "Validating AKS Pods..."
                bat """
                kubectl get pods
                """
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for more details."
        }
    }
}
